Mmain	main.c	/^int main(int argc, char** argv)$/
Mmain_client	main_client.c	/^int main(int argc, char** argv)$/
Mmain_server	main_server.c	/^int main (int argc, char ** argv){$/
SpressKey	main.c	/^void SpressKey(int key, int xx, int yy) {$/
SreleaseKey	main.c	/^void SreleaseKey(int key, int xx, int yy) {$/
add_trail	traillist.c	/^trailnode* add_trail(void){$/
arena	arena.h	/^typedef struct arenatype *arena;$/
arena_free	arena.c	/^void arena_free(arena arna){$/
arena_get_update	arena.c	/^void arena_get_update(arena arna, ENetPacket * pac/
arena_init	arena.c	/^arena arena_init(int plyr_nm, int AI, int x_bd, in/
arena_player_status	arena.c	/^int arena_player_status(arena arna){$/
arena_ply_speed	arena.c	/^int arena_ply_speed(arena arna, int plyr_id, int a/
arena_ply_turn	arena.c	/^int arena_ply_turn(arena arna, int plyr_id, int di/
arena_plyr_t_off	arena.c	/^void arena_plyr_t_off(arena arna, int plyr_id){$/
arena_plyr_t_on	arena.c	/^void arena_plyr_t_on(arena arna, int plyr_id){$/
arena_plyr_tg	arena.c	/^int arena_plyr_tg(arena arna, int plyr_id){$/
arena_render	arena.c	/^void arena_render(arena arna){$/
arena_send_update	arena.c	/^void arena_send_update(arena arna, ENetHost * enet/
arena_update	arena.c	/^void arena_update(arena arna, double dt){$/
arena_update_client	arena.c	/^void arena_update_client(arena arna, double dt){$/
arena_winner	arena.c	/^int arena_winner(arena arna){$/
arenatype	arena.c	/^} arenatype;$/
chat	chat.h	/^typedef struct chattype * chat;$/
chat_add_message	chat.c	/^int chat_add_message(chat cht, char *name, char *m/
chat_data	chat.c	/^} chat_data;$/
chat_free	chat.c	/^void chat_free(chat cht){$/
chat_init	chat.c	/^chat chat_init(void){$/
chat_node	chat.c	/^} chat_node;$/
chat_render	chat.c	/^void chat_render(chat cht, int type){$/
chattype	chat.c	/^} chattype;$/
clean_up	main_client.c	/^void clean_up(void){$/
client	client.h	/^typedef struct clienttype * client;$/
client_connect	client.c	/^void client_connect(client clnt){$/
client_connection	client.c	/^int client_connection(client clnt){$/
client_disconnect	client.c	/^void client_disconnect(client clnt){$/
client_free	client.c	/^void client_free(client clnt){$/
client_get_game_free	client.c	/^static void client_get_game_free(client clnt){$/
client_get_game_init	client.c	/^static void client_get_game_init(client clnt, ENet/
client_init	client.c	/^client client_init(ENetHost * enet_client){$/
client_keys	client.c	/^void client_keys(client clnt, unsigned char key){$/
client_process_packets	client.c	/^void client_process_packets(client clnt, ENetEvent/
client_render	client.c	/^void client_render(client clnt){$/
client_rkeys	client.c	/^void client_rkeys(client clnt, unsigned char key){/
client_rskeys	client.c	/^void client_rskeys(client clnt, int key){$/
client_skeys	client.c	/^void client_skeys(client clnt, int key){$/
client_update	client.c	/^void client_update(client clnt, double dt){$/
clienttype	client.c	/^} clienttype;$/
clnt_gm_size	client.c	/^vector2 clnt_gm_size(client clnt){$/
disconnect_peers	server.c	/^static void disconnect_peers(ENetHost *host){$/
display	main.c	/^void display(void) {$/
get_input	client.c	/^static int get_input(client clnt, unsigned char ke/
get_keys	server.c	/^static void get_keys(server svr, ENetEvent * event/
getthetime	main_server.c	/^unsigned long int getthetime()$/
idle	main.c	/^void idle(void)$/
init	main.c	/^void init(int argc, char** argv)$/
init_network	main_client.c	/^int init_network(void){$/
line_collison	collison.c	/^int line_collison(vector2 p, vector2 bp, vector2 q/
message_keys	client.c	/^static void message_keys(client clnt, unsigned key/
mouseButton	main.c	/^void mouseButton(int bbutton, int sstate, int xx, /
mouseMotion	main.c	/^void mouseMotion(int xx, int yy) $/
name_keys	client.c	/^static void name_keys(client clnt, unsigned key){$/
normal_keys	client.c	/^static void normal_keys(client clnt, unsigned key)/
not_connected_keys	client.c	/^static void not_connected_keys(client clnt, unsign/
numbers	main.c	/^void numbers(int value){$/
particlenode	particle_sys.c	/^} particlenode;$/
particles	particle_sys.h	/^typedef struct particlenode *particles;$/
particles_bound	particle_sys.c	/^void particles_bound(particles pts, int x, int y){/
particles_free	particle_sys.c	/^void particles_free(particles pts){$/
particles_init	particle_sys.c	/^particles particles_init(vector2 pt1, vector2 pt2,/
particles_render	particle_sys.c	/^void particles_render(particles pts){$/
particles_update	particle_sys.c	/^void particles_update(particles pts, float dt){$/
particletype	particle_sys.c	/^} particletype;$/
player	player.h	/^typedef struct playertype *player;$/
player_ck_bd	player.c	/^int player_ck_bd(player plyr, int x, int y){$/
player_ck_plyr	player.c	/^int player_ck_plyr(player plyr_hd, player plyr_tl)/
player_ck_self	player.c	/^int player_ck_self(player plyr){$/
player_die	player.c	/^void player_die(player plyr){$/
player_free	player.c	/^void player_free(player plyr){$/
player_get_update	player.c	/^void player_get_update(player *actors, ENetPacket /
player_init	player.c	/^player player_init(int x, int y, double th){$/
player_render	player.c	/^void player_render(player plyr){$/
player_send_update	player.c	/^void player_send_update(player plyr, int plyr_id, /
player_speed	player.c	/^void player_speed(player plyr, int a){$/
player_status	player.c	/^int player_status(player plyr){$/
player_toggle	player.c	/^void player_toggle(player plyr){$/
player_trail_off	player.c	/^void player_trail_off(player plyr){$/
player_trail_on	player.c	/^void player_trail_on(player plyr){$/
player_turn	player.c	/^void player_turn(player plyr, int dir){$/
player_update	player.c	/^void player_update(player plyr, double dt){$/
playertype	player.c	/^} playertype;$/
plist	plist.h	/^typedef struct pnode *plist;$/
plist_add	plist.c	/^int plist_add(plist *list, vector2 p){$/
plist_free	plist.c	/^void plist_free(plist list){$/
plist_head	plist.c	/^int plist_head(plist *list, vector2 p){$/
plist_intersect	plist.c	/^int plist_intersect(plist list, vector2 g1, vector/
plist_render	plist.c	/^void plist_render(plist list){$/
plist_update	plist.c	/^int plist_update(plist list, float dt){$/
pnode	plist.c	/^} pnode;$/
pressKey	main.c	/^void pressKey(unsigned char key, int xx, int yy) {/
processNormalKeys	main_client.c	/^void processNormalKeys(unsigned char key, int xx, /
pt_type	plist.c	/^} pt_type;$/
releaseKey	main.c	/^void releaseKey(unsigned char key, int xx, int yy)/
releaseNormalKeys	main_client.c	/^void releaseNormalKeys(unsigned char key, int xx, /
renderBitmapString	chat.c	/^static void renderBitmapString($/
reshape	main.c	/^void reshape(int width, int height)$/
send_keys	client.c	/^static void send_keys(client clnt, int channel){$/
server	server.h	/^typedef struct servertype *server;$/
server_add_user	server.c	/^void server_add_user(server svr, ENetPeer *peer){$/
server_free	server.c	/^void server_free(server svr){$/
server_init	server.c	/^server server_init(ENetHost * enet_server){$/
server_process_packet	server.c	/^void server_process_packet(server svr, ENetEvent e/
server_remove_user	server.c	/^void server_remove_user(server svr, ENetPeer *peer/
server_send_gm_free	server.c	/^void server_send_gm_free(server svr, enet_uint8 ch/
server_send_gm_init	server.c	/^void server_send_gm_init(server svr, double timer,/
server_update	server.c	/^void server_update(server svr, double dt){$/
servertype	server.c	/^} servertype;$/
trail_free	traillist.c	/^void trail_free(traillist tlist){$/
trail_off	traillist.c	/^void trail_off(traillist tlist){$/
trail_on	traillist.c	/^int trail_on(traillist tlist){$/
traillist	traillist.h	/^typedef struct traillisttype *traillist;$/
traillist_init	traillist.c	/^traillist traillist_init(void){$/
traillist_intersect	traillist.c	/^int traillist_intersect(traillist tlist, vector2 g/
traillist_render	traillist.c	/^void traillist_render(traillist tlist){$/
traillist_update	traillist.c	/^void traillist_update(traillist tlist, vector2 p, /
traillisttype	traillist.c	/^} traillisttype;$/
trailnode	traillist.c	/^} trailnode;$/
trailtype	traillist.c	/^} trailtype;$/
tronkeys	client.c	/^} tronkeys;$/
user	user.h	/^typedef struct usertype *user;$/
user_add	user.c	/^int user_add(user usr, ENetPeer *peer, int status)/
user_add_list	user.c	/^int user_add_list(user usr, user_info ui){$/
user_all_not_ready	user.c	/^void user_all_not_ready(user usr){$/
user_change_name_send	user.c	/^void user_change_name_send(user usr, ENetHost * se/
user_check_states	user.c	/^int user_check_states(user usr){$/
user_free	user.c	/^void user_free(user usr){$/
user_get_chat_message	user.c	/^void user_get_chat_message(user usr, chat cht, ENe/
user_get_disconnect	user.c	/^void user_get_disconnect(user usr, ENetPacket * pa/
user_get_list	user.c	/^void user_get_list(user usr, ENetPacket * packet){/
user_info	user.c	/^} user_info;$/
user_init	user.c	/^user user_init(void){$/
user_nameby_id	user.c	/^char * user_nameby_id(user usr, int id){$/
user_number	user.c	/^int user_number(user usr){$/
user_peer_aid	user.c	/^int user_peer_aid(user usr, ENetPeer * peer){$/
user_remove	user.c	/^int user_remove(user usr, ENetPeer *peer){$/
user_remove_id	user.c	/^int user_remove_id(user usr, int id){$/
user_render	user.c	/^void user_render(user usr, int x, int y){$/
user_send_chat_message	user.c	/^void user_send_chat_message(user usr, ENetEvent * /
user_send_disconnect	user.c	/^void user_send_disconnect(int id, int channel, ENe/
user_send_list	user.c	/^void user_send_list(user usr, ENetHost * host, int/
user_send_new_client	user.c	/^void user_send_new_client(user usr, ENetPeer * pee/
user_set_arena_id	user.c	/^int user_set_arena_id(user usr){$/
user_set_ready	user.c	/^void user_set_ready(user usr, ENetPeer *peer){$/
user_sget_send_pstate	user.c	/^void user_sget_send_pstate(user usr, ENetHost * se/
user_update_score	user.c	/^void user_update_score(user usr, int arna_id, int /
usernode	user.c	/^} usernode;$/
usertype	user.c	/^} usertype;$/
v2Add	vector2.c	/^vector2 v2Add(vector2 a, vector2 b) {$/
v2Arg	vector2.c	/^float v2Arg(vector2 v) {$/
v2Cross	vector2.c	/^float v2Cross(vector2 a, vector2 b) {$/
v2Dot	vector2.c	/^float v2Dot(vector2 a, vector2 b) {$/
v2Len	vector2.c	/^float v2Len(vector2 v) {$/
v2Neg	vector2.c	/^vector2 v2Neg(vector2 a) {$/
v2Polar	vector2.c	/^vector2 v2Polar(float len, float angle) {$/
v2Rotate	vector2.c	/^vector2 v2Rotate(float ang, vector2 a){$/
v2SPow	vector2.c	/^float v2SPow(vector2 v) {$/
v2Sub	vector2.c	/^vector2 v2Sub(vector2 a, vector2 b) {$/
v2Unit	vector2.c	/^vector2 v2Unit(vector2 v) {$/
v2sMul	vector2.c	/^vector2 v2sMul(float f, vector2 v) {$/
vector2	vector2.h	/^} vector2;$/
